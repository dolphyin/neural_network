from numpy import *
from scipy import *
import util

class NeuralNetwork(object):

    def __init__(self, num_layers, num_features, num_outputs):
        self.num_layers = num_layers
        self.layers = [0] * num_layers;
        prev_layer = num_features
        for i in range(num_layers):
            if i == num_layers -1:
                self.layers[i] = NeuralNetworkLayer(i, prev_layer, num_outputs)
            else:
                # temp set next layer to num_ouputs to work for single layer
                self.layers[i] = NeuralNetworkLayer(i, prev_layer, num_outputs) 
        
    def classify(self, test_data):
        num_samples = test_data.shape[1]
        hypotheses = zeros((num_samples))
        for i in range(num_samples):
            for l in range(self.num_layers):
                layer = self.layers[l]
                if l == 0:
                    prev_x = test_data[:,i];
                else:
                    prev_x = layer.calculate_x(prev_x)
            hypotheses[i] = prev_x.argmax()
        return hypotheses
 
    # Trains using the back propogation algorithm
    def train(self, train_data, train_classes, learning_rate, num_epochs=10):
        for i in range(num_epochs):
            mini_batches = self.getMiniBatches(transpose(train_data), train_classes)
            for data_point in mini_batches:
                data_feature = data_point[0:data_point.shape[0]-1]
                data_class = data_point[-1]
                
                self.forward_pass(data_feature)
                self.backward_pass(data_class, util.get_mean_squared_delta)

                self.update_weights(learning_rate)

    def forward_pass(self, data_feature):
        for i in range(self.num_layers):
            layer = self.layers[i]
            if i == 0:
                #prev_x = array(([util.sigmoid(f) for f in data_feature]))
                prev_x = data_feature
                layer.set_x(prev_x)
            else:
                curr_x = layer.calculate_x(prev_x)
                layer.set_x(curr_x)
                prev_x = curr_x
    
    def backward_pass(self, data_class, error_delta_method):
        prev_weights = None
        prev_deltas = None
        for l in range(self.num_layers-1, -1, -1):
            layer = self.layers[l]
            if l == self.num_layers-1:
                hypotheses = layer.get_x() 
                #hypotheses = array(([1 if x == max(hypotheses) else 0 for x in hypotheses]))
                truth = array(([ 1 if i == data_class else 0 for i in range(10)]))
                prev_deltas =  error_delta_method(hypotheses, truth)
                prev_weights = layer.weights
                layer.set_deltas(prev_deltas)
            else:
                new_deltas = layer.calculate_deltas(prev_deltas,layer.get_x(), prev_weights) 
                layer.set_deltas(new_deltas)
                prev_deltas = new_deltas
                prev_weights = layer.weights

    def update_weights(self, learning_rate):
        for l in range(self.num_layers):
            layer = self.layers[l]
            if l == 0:
                prev_x = layer.get_x()
            else:
                for j in range(layer.weights.shape[1]):
                    layer.weights[:,j] -= learning_rate * prev_x * layer.deltas[j]

    # Returns list of randomized batches of data of size
    def getMiniBatches(self ,train_data, train_classes, size=200):
        all_data = hstack((train_data, train_classes))
        random.shuffle(all_data)
        if train_classes.shape[0]/size == 0:
            return all_data 
        return vsplit(all_data, train_classes.shape[0]/size)
    
class NeuralNetworkLayer(object):

    def __init__(self, layer_num, prev_num_nodes, num_nodes):
        self.layer_num = layer_num
        self.num_nodes = num_nodes
        self.x = zeros(num_nodes)
        self.deltas = zeros(num_nodes)
        self.weights = random.rand(prev_num_nodes, num_nodes)

    # Calculates the current layer's X values based on layer's weights
    # and previous layer's X values.
    # @params: 
    def calculate_x(self, prev_x):
        sums = [sum(prev_x * self.weights[:,j]) for j in range(self.weights.shape[1])]
        return array(([util.sigmoid(s) for s in sums]))

    def get_x(self):
        return self.x

    def set_x(self, x):
        self.x = x
    
    def calculate_deltas(self, prev_deltas, curr_x, weights):
        sig_vect = 1 - curr_x**2
        for i in range(len(curr_x)):
            sig_vect[i] *= sum(weights[i,:] * prev_deltas)
        return array(sig_vect)

    def set_deltas(self, new_deltas):
        self.deltas = new_deltas
